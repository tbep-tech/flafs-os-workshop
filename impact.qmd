---
execute: 
  echo: false
  warning: false
---

# Open science for impactful products {#impact}

```{r}
library(fontawesome)
```

## Goals and motivation

This is the third module in our workshop on open science. Now we focus on how Quarto can be used as a document preparation system to generate easily shared web content.

-   **Goal**: understand best practices for reproducible documents using Quarto
-   **Motivation**: cultivate your analyses as living, shared resources

## Quarto

Quarto is a relatively new document preparation system that lets you create reproducible and dynamic content that is easily shared with others.  Quarto is integrated with RStudio and allows you to combine plain text language with analysis code in the same document.  

Quarto belongs to a class of reporting tools called dynamic documents or literate programming [@knuth84].  It is not the first of its kind, but it builds substantially on its predecessors by bridging multiple programming langues. 

Advantages of creating analyses using Quarto include:

1. Clear demonstration of a workflow using plain text and code
1. Reproducible materials allows others to use your work
1. Easily shared content (e.g., on GitHub)
1. Keeping the data, analysis, and writing all in the same place

This next section will run through the very basics of creating a Quarto document, some of the options for formatting, and how to generate shared content.  You'll follow along in this module. 

(@) Create a new project in RStudio, first open RStudio and then select "New project" from the File menu at the top.

    ![](img/newproj.PNG)

    Then select "New Directory".  Create a directory in a location that's easy to find. 
    
    ![](img/newdir.PNG)

(@) Open a new Quarto file from the File menu under New file > Quarto Document.

    ![](img/newquarto.PNG)
    
    Enter a title for the document (e.g., "Quarto practice") and your name as the author. Use the defaults for the other options and hit "Create". 
    
    ![](img/tempquarto.PNG)
    
    Save the file in the project root directory (give it any name you want).

(@) Let's get familiar with the components of a Quarto document.

    ::: {.callout-tip}
    The three types of information included in a Quarto document are:
    
    * YAML
    * Code chunks
    * Plain or Markdown text
    :::
    
    The new file is completely empty except for the title, name, and editor type at the top.  The content at the top is called [YAML](https://quarto.org/docs/get-started/hello/rstudio.html#yaml-header){target="_blank"}, which defines global options for the document.
    
    ```yaml
    ---
    title: "Quarto practice"
    author: "Marcus Beck"
    editor: visual
    ---
    ```
    
    You'll also notice that there's a button on the top-left that lets you toggle between "source" or "visual" editor mode.  The source editor simply lets you add text to the document, whereas the visual editor lets you add content that is partially rendered.  First time Quarto users may prefer the visual editor. 
    
    ![](img/editor.PNG)
    
    Using the visual editor, we can insert a code chunk (or code cell). This can be done by selecting the appropriate option from the Insert menu.  Note the variety of programming langues that can be used with the code chunk. 
    
    ![](img/insertchunk.PNG)
    
    We can enter any code we want in the code chunks, including options for how the code chunk is evaluated.  Options are specified using the hashpipe notation, `#|`.  
    
    ```{{r}}
    #| echo: true
    print('Hello Quarto!')
    ```
    
    When the file is rendered, the code is run and results displayed in the output.  There are many options to change how code chunks are executed, which we'll discuss below. 
    
    ```{r}
    #| echo: true
    print('Hello Quarto!')
    ```
    
    We can also run the code chunks separately without rendering the file using the arrow buttons on the top right in the source document.  This can be useful for quickly evaluating your code as you include it in the file. 
    
    ::: {.callout-tip}
    Code chunks are executed in the order they appear in the document when a .qmd file is rendered.
    :::
    
    Descriptive text can be entered anywhere else in the file.  This is where we can describe in plain language what our analysis does or any other relevant information.  Text can be entered as-is or using simple [markdown](https://quarto.org/docs/authoring/markdown-basics.html){target="_blank"} text that can format the appearance of the output. If you're using the visual editor, you can use some of the items in the file menu to modify the text appearance.  In the source editor, you can manually enter markdown text:
    
    ```{=html}
    <div class="sourceCode">
    <pre class="sourceCode markdown">
    <code class="sourceCode markdown">
    I  can write anything I want right here. Here's some **bold text**.
    
    I can also make lists
    
    1. Item 1
    1. Item 2
    </code>
    </pre>
    </div>
    ```
    
    When the file is rendered, the markdown text will be formatted.  The text will be formatted already using the visual editor: 
    
    ::: border
    I  can write anything I want right here. Here's some **bold text**.
    
    I can also make lists
    
    1. Item 1
    1. Item 2
    :::

(@) Render the .qmd file to the output format. 

    The source file is a .qmd document.  We need to render the document to create the output format - HTML (default), PDF, or Word.  The following happens when you hit the render button at the top.

    ![](img/rstudio-qmd-how-it-works.png)

    Here's what your RStudio session should look like (note the three parts of the source .qmd document - YAML, code chunk, and Markdown text). The rendered HTML file will appear in the Viewer pane on the right. 
     
    ![](img/completequarto.PNG){.border}

    ::: {.callout-tip}
    A rendered Quarto document as an HTML, PDF, Word, or other file format is stand-alone and can be shared with anybody!
    :::
     
### Code chunk options

The behavior of the code chunks when the file is rendered can be changed using the [many options](https://quarto.org/docs/reference/cells/cells-knitr.html){target="_blank"} available in Quarto.  This can be useful for a few reasons. 

1. Only displaying the output of a code chunk
1. Only displaying the code and not running the chunk
1. Running the code without displaying output for use 
1. Suppressing warnings and messages
1. Defining table or figure options (e.g., height, width, captions, etc.)

Code chunk options can be applied globally to all chunks in the document or separately for each chunk.

To apply them globally, they'll look something like this in the YAML, where options are added after `execute:` 

```yaml
---
title: "My Document"

execute: 
  echo: false
  warning: false
---
```

::: {.callout-tip}
Be careful with indentation in the YAML, the document won't render if the indentation is incorrect.
:::

To apply to individual code chunks, use the `#|` (hashpipe) notation at the top of the code chunk. This will override any global options if you've included them in the YAML. Below, `echo: true` indicates that the code will be displayed in the output. 

```{{r}}
#| echo: true
plot(1:10)
```

Here's a short list of other useful execution options:

+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Option      | Description                                                                                                                                                                                       |
+=============+===================================================================================================================================================================================================+
| `eval`      | Evaluate the code chunk (if `false`, just echos the code into the output).                                                                                                                        |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `echo`      | Include the source code in output                                                                                                                                                                 |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `output`    | Include the results of executing the code in the output (`true`, `false`, or `asis` to indicate that the output is raw markdown and should not have any of Quarto's standard enclosing markdown). |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `warning`   | Include warnings in the output.                                                                                                                                                                   |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `error`     | Include errors in the output (note that this implies that errors executing code will not halt processing of the document).                                                                        |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `include`   | Catch all for preventing any output (code or results) from being included (e.g. `include: false` suppresses all output from the code block).                                                      |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `message`   | Include messages in rendered output
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

It's also worth noting that R code can be executed "inline" outside of code chunks.  This can be useful if you want to include statements that reference particular values or information that is linked directly to data.  Inline R code is entered using the ``r`` syntax. 

```{=html}
<div class="sourceCode">
<pre class="sourceCode markdown">
<code class="sourceCode markdown">
I can enter inline text like &#96r 1 + 1&#96.
</code>
</pre>
</div>
```

Text with inline R code will look like this when the document is rendered.

::: border
I can enter inline text like `r 1 + 1`.
::: 

### Figures and tables

Figures and tables are easily added in Quarto, using either R code or importing from an external source. 

Any figures created in code chunks will be included in the rendered output. Relevant code chunk options for figures include `fig-height`, `fig-width`, `fig-cap`, `label` (for cross-referencing) and `fig-align`.

```{{r}}
#| label: fig-myhist
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Here's my awesome histogram."
#| fig-align: "center"
vals <- rnorm(100)
hist(vals)
```
```{r}
#| label: fig-myhist
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Here's my awesome histogram."
#| fig-align: "center"
vals <- rnorm(100)
hist(vals)
```

Figures can be cross-referenced in the text using the `@` notation with the figure label.  

```markdown
Here's a cross-reference to @fig-myhist.
```

When the file is rendered, the appropriate figure number will be displayed with a link to the figure:

::: border
Here's a cross-reference to @fig-myhist.
:::

Similarly, tabular output can be created inside code chunks. 

```{{r}}
#| label: tbl-mytable
#| tbl-cap: "Here's my awesome table."
totab <- data.frame(
  Species = c('Bluegill', 'Largemouth bass', 'Crappie'),
  Count = c(12, 5, 4)
)
knitr::kable(totab)
```
```{r}
#| label: tbl-mytable
#| tbl-cap: "Here's my awesome table."
totab <- data.frame(
  Species = c('Bluegill', 'Largemouth bass', 'Crappie'),
  Count = c(12, 5, 4)
)
knitr::kable(totab)
```

And a cross-reference: 

```markdown
Here's a cross-reference to @tbl-mytable.
```
::: border
Here's a cross-reference to @tbl-mytable.
:::

::: {.callout-tip}
Label tags for tables and figures should include the `tbl-` or `fig-` prefix for proper cross-referencing.
:::

Figures can also be imported from an external source (e.g., from your computer or the web) using this notation, where the image is in the `img` folder in my working directory.   

```markdown
![](img/blackcrappie.jpg)
```
![](img/blackcrappie.jpg)

You can also add a figure from a URL using the same notation.

```markdown
![](https://www.bigcatchflorida.com/media/1174/blackcrappie.jpg)
```
![](img/blackcrappie.jpg)

Adding captions and labels to external figures looks something like this: 

```markdown
![Here's a beautiful crappie](img/blackcrappie.jpg){#fig-crappie}
```
![Here's a beautiful crappie](img/blackcrappie.jpg){#fig-crappie}

The cross-reference is done the same.
```r
Here's a cross-reference to @fig-crappie
```
::: border
Here's a cross-reference to @fig-crappie.
:::

Likewise, tables can be imported from an external source (e.g., Excel). You'll want to do this in a code chunk and add the appropriate options (e.g., to cross-reference @tbl-habitats). 

```{{r}}
#| label: tbl-habitats
#| tbl-cap: "The first six rows of our tidy data"
mytab <- readxl::read_excel('data/tidy.xlsx')[1:6, ]
knitr::kable(mytab)
```
```{r}
#| label: tbl-habitats
#| tbl-cap: "The first six rows of our tidy data"
mytab <- readxl::read_excel('data/tidy.xlsx')[1:6, ]
knitr::kable(mytab)
```

Visit these links for full details on [figures](https://quarto.org/docs/authoring/figures.html){target="_blank"} and [tables](https://quarto.org/docs/authoring/tables.html){target="_blank"} in Quarto. R also has a rich [library of packages](https://towardsdatascience.com/top-7-packages-for-making-beautiful-tables-in-r-7683d054e541){target="_blank"} for producing tables, most of which play nice with Quarto.  

### Output options

Rendering a Quarto file to an HTML, PDF, or Word document is as simple as adding the appropriate option to the YAML.  This is done by choosing the format when you create a new Quarto file: 

![](img/tempquarto.PNG)

The output format can also be added in the YAML of the document.  

```yaml
---
title: "Quarto practice"
author: "Marcus Beck"
editor: visual
format: html
---
```

::: {.callout-tip}
The default output format is HTML and it does not need to be added explicitly to the YAML.
:::

Alternative formats are specified the same way (i.e., Word and PDF). 

```yaml
---
title: "Quarto practice"
author: "Marcus Beck"
editor: visual
format: docx
---
```

```yaml
---
title: "Quarto practice"
author: "Marcus Beck"
editor: visual
format: pdf
---
```

You can also specify multiple formats (note the indentation).  The `default` setting just indicates that we want to use all default options for each format.  

```yaml
---
title: "Quarto practice"
author: "Marcus Beck"
editor: visual
format: 
  html: default
  docx: default
  pdf: default
---
```

You can use the dropdown menu to render each file format one at a time.  The dropdown menu will show the options that are included in the YAML.

![](img/renderoption.PNG)

You can also render all formats at once using the `quarto` package in the console.  The path to your file you want to render will differ depending on where it is in your working directory. 

```r
quarto::quarto_render('data/quartoex.qmd')
```

Or you can render all format at once using the `render` command in the terminal (terminal tab, bottom left pane of RStudio).  This requires the separate installation of Quarto described in the [setup](https://tbep-tech.github.io/flafs-os-workshop/setup.html#install-quarto).

```{.bash filename="Terminal"}
quarto render data/quartoex.qmd
```

Rendering a file to PDF uses LaTeX and you'll need to install tinytex before you can use this option. This can also be done in the terminal. 

```{.bash filename="Terminal"}
quarto install tool tinytex
```

There are several options you can include in the YAML to control the formatting of the output.  Some of the options apply to all format types, whereas others are specific to each.  Here's an example building out these options.  

```yaml
---
title: "Quarto practice"
author: "Marcus Beck"
editor: visual
toc: true 
number-sections: true
format: 
  html: 
    code-fold: true
  docx: default
  pdf: 
    geometry: 
      - top=30mm
      - left=0mm
---
```

In the above example, there are two new options that apply globally to the HTML, Word, and PDF outputs.  Specifically, we've indicated that we'd like a table of contents (`toc: true`) and that the sections should be numbered (`number-sections: true`) in the rendered document.

We'ave also added some specific options to the HTML and PDF output.  For the HTML output, we've indicated that we want the code chunks to be folded (i.e., toggle between seen and not seen, `code-fold: true`).  For the PDF output, we've changed the geometry of the margins using the `geometry` options. 

Here's what the HTML output would look like: 

![](img/formatoptions.PNG){.border}

There are many other options available for each output format, as well as other format types.  View the full list [here](https://quarto.org/docs/output-formats/all-formats.html){target="_blank"}.

### Citations and References

One of the more valuable aspects of Quarto is the ability to easily add and reference other works in your document. This includes finding papers and reports, citing them in your document, and formatting references - all with relative ease in Quarto. 

You can of course do this using the source editor, but it's slightly easier using the visual editor.  If we switch to visual mode (top-left button of the .qmd file), you can type a forward-slash to view a menu of items to insert in the document. Just start typing text to search items to insert.

::: {.callout-tip}
The [Insert Anything](https://quarto.org/docs/visual-editor/options.html#insert-anything){target="_blank"} tool in the visual editor mode is useful to... insert anything! Just execute `/` at the beginning of a line or `Ctrl/Cmd + /` after some text.
:::

![](img/insertanything.PNG)

You can also insert a citation from the menu at the top of the .qmd file. 

![](img/insertcitation.PNG)

Either option will open the citation menu where you can add citations from a variety of sources (ie., [Zotero](https://quarto.org/docs/visual-editor/technical.html#citations-from-zotero){target="_blank"}, [DOI](https://quarto.org/docs/visual-editor/technical.html#citations-from-dois){target="_blank"}, [CrossRef](https://www.crossref.org/){target="_blank"}, [PubMed](https://pubmed.ncbi.nlm.nih.gov/){target="_blank"}, or [DataCite](https://datacite.org/){target="_blank"}).

For example, we can copy/paste a DOI to find a reference of interest. 

![](img/doisearch.PNG)

Or we can search by title.

![](img/crossrefsearch.png)

Once the paper is found, you can click the Insert button to add it to your document. This adds a reference file, information in the YAML, and the in-text citation.  The reference file will be called `references.bib` by default and includes a [BibTeX](http://www.bibtex.org/){target="_blank"} formatted reference that looks like this: 
``` markdown
@article{shafland1982,
	title = {Lower lethal temperatures for fourteen non-native fishes in Florida},
	author = {Shafland, Paul L. and Pestrak, James M.},
	year = {1982},
	month = {03},
	date = {1982-03},
	journal = {Environmental Biology of Fishes},
	pages = {149--156},
	volume = {7},
	number = {2},
	doi = {10.1007/bf00001785},
	url = {http://dx.doi.org/10.1007/BF00001785},
	langid = {en}
}
```

The YAML file will now indicate the reference file to use that includes the references.

``` yaml
---
title: "Quarto practice"
author: "Marcus Beck"
editor: visual
bibliography: references.bib
toc: true 
number-sections: true
format: 
  html: 
    code-fold: true
  docx: default
  pdf: 
    geometry: 
      - top=30mm
      - left=0mm
---
```

The text citation will look like this, where `@` is the tag used to reference the citation using the identifier from the references file.

``` markdown
Many non-native species in Florida have lower lethal temperatures [@shafland1982].
```

When the Quarto file is rendered, the citation will be formatted and you'll see it added to the references section at the end of the document. 

::: border
Many non-native species in Florida have lower lethal temperatures [@shafland1982].
:::

![](img/refex.PNG)

The `@` citation syntax also has different options for displaying the citation in the text (full explanation [here](https://quarto.org/docs/authoring/footnotes-and-citations.html){target="_blank"}.  For example, omitting the brackets does the following:

``` markdown
@shafland1982 state that many non-native species in Florida have lower lethal temperatures.
```

::: border
@shafland1982 state that many non-native species in Florida have lower lethal temperatures.
:::

Additional information about citations in Quarto can be found [here](https://quarto.org/docs/get-started/authoring/rstudio.html#citations){target="_blank"}.

### Publishing

A rendered Quarto file can be shared with anyone as a standalone document.  They can also be hosted online and shared by URL.  This latter approach is useful to make the document available to anyone with the web address.

The easiest way to do this is to publish your document to [RPubs](https://rpubs.com/){target="_blank"}, a free service from Posit for sharing web documents. Click the <kbd>![](img/rstudio-publish-button.png){width="25" height="23"}</kbd> publish button on the top-right of the editor toolbar.  You will be prompted to create an account if you don't have one already.

This can also be done using the `quarto` R package in the console.

```r
quarto::quarto_publish_doc(
  "data/quartoex.qmd", 
  server = "rpubs.com"
  )
```

You can also use the Quarto CLI in the terminal.  Here we are publishing the document to [Quarto Pub](https://quartopub.com/){taret="_blank"}.

```{.bash filename="Terminal"}
quarto publish quarto-pub data/quartoex.qmd
```

If your Quarto document is in an RStudio project on GitHub, you can also publish to [GitHub Pages](https://pages.github.com/){target="_blank"}.

```{.bash filename="Terminal"}
quarto publish gh-pages data/quartoex.qmd
```

## Summary

In this module we learned about the basics of creating Quarto documents that combine markdown text with R code.  There's much, much more Quarto can do for you.  Please visit [https://quarto.org/](https://quarto.org/){target="_blank"} for more information on how you can use these documents to fully leverage their potential for open science.
